apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dependency-track.fullname" . }}-apiserver
  labels:
    app.kubernetes.io/component: apiserver
    {{- include "dependency-track.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.apiserver.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: apiserver
      {{- include "dependency-track.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app.kubernetes.io/component: apiserver
        {{- include "dependency-track.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dependency-track.serviceAccountName" . }}-apiserver
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - image: "{{ .Values.apiserver.image.repository }}:{{ .Values.apiserver.image.tag | default .Chart.AppVersion }}"
          name: "{{ .Chart.Name }}-apiserver"
          envFrom:
          {{- if .Values.oidc.enabled }}
          - configMapRef:
              name: {{ include "dependency-track.fullname" . }}-apiserver-oidc
          {{- end }}
          env:
          - name: ALPINE_DATA_DIRECTORY
            value: "/data"
          {{- if .Values.postgresql.enabled }}
          - name: ALPINE_DATABASE_MODE
            value: "external"
          - name: ALPINE_DATABASE_DRIVER
            value: "org.postgresql.Driver"
          - name: ALPINE_DATABASE_URL
            value: jdbc:postgresql://{{ .Release.Name }}-postgresql/{{ .Values.postgresql.auth.database }}
          - name: ALPINE_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-postgresql
                key: password
          - name: ALPINE_DATABASE_USERNAME
            value: {{ .Values.postgresql.auth.username }}
          {{- end }}
          {{- with .Values.apiserver.env }}
          {{- toYaml . | nindent 8 }}
          {{- end }}
          ports:
            - containerPort: 8080
              name: http
          volumeMounts:
          - name: data
            mountPath: /data
          - name: tmp
            mountPath: /tmp
          resources:
            limits:
              cpu: 2
              memory: 6Gi
            requests:
              cpu: 250m
              memory: 6Gi
      restartPolicy: Always
      volumes:
      - name: tmp
        emptyDir: {}
      - name: data
        {{- if .Values.apiserver.persistentVolume.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.apiserver.persistentVolume.existingClaim }}{{ .Values.apiserver.persistentVolume.existingClaim }}{{- else }}{{ include "common.names.fullname" . }}-apiserver{{- end }}
        {{- else }}
        emptyDir:
        {{- if .Values.apiserver.emptyDir.sizeLimit }}
          sizeLimit: {{ .Values.apiserver.emptyDir.sizeLimit }}
        {{- else }}
          {}
        {{- end -}}
        {{- end }}
